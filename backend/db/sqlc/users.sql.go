// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, role, full_name, email, password)
VALUES ( $1, $2, $3, $4, $5)
RETURNING users.id
`

type CreateUserParams struct {
	Username string `json:"username"`
	Role     string `json:"role"`
	FullName string `json:"full_name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Role,
		arg.FullName,
		arg.Email,
		arg.Password,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getNumberOfAdminUsers = `-- name: GetNumberOfAdminUsers :one
SELECT COUNT(*) WHERE EXISTS (
    SELECT id, username, role, full_name, email, password, password_changed, updated_at, created_at FROM users
    WHERE role = $1
)
`

func (q *Queries) GetNumberOfAdminUsers(ctx context.Context, role string) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfAdminUsers, role)
	var count int64
	err := row.Scan(&count)
	return count, err
}
