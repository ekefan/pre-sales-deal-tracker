// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sale_rep.sql

package db

import (
	"context"
	"time"
)

const createPitchRequest = `-- name: CreatePitchRequest :one
INSERT INTO pitch_requests (
    sales_rep_id, sales_rep_name, status, customer_name, pitch_tag, customer_request, request_deadline
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) 
RETURNING id, sales_rep_id, sales_rep_name, status, customer_name, pitch_tag, customer_request, request_deadline, admin_viewed, created_at, updated_at
`

type CreatePitchRequestParams struct {
	SalesRepID      int64
	SalesRepName    string
	Status          string
	CustomerName    string
	PitchTag        string
	CustomerRequest string
	RequestDeadline time.Time
}

func (q *Queries) CreatePitchRequest(ctx context.Context, arg CreatePitchRequestParams) (PitchRequest, error) {
	row := q.queryRow(ctx, q.createPitchRequestStmt, createPitchRequest,
		arg.SalesRepID,
		arg.SalesRepName,
		arg.Status,
		arg.CustomerName,
		arg.PitchTag,
		arg.CustomerRequest,
		arg.RequestDeadline,
	)
	var i PitchRequest
	err := row.Scan(
		&i.ID,
		&i.SalesRepID,
		&i.SalesRepName,
		&i.Status,
		&i.CustomerName,
		&i.PitchTag,
		&i.CustomerRequest,
		&i.RequestDeadline,
		&i.AdminViewed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePitchRequest = `-- name: DeletePitchRequest :exec
DELETE FROM pitch_requests
WHERE sales_rep_id = $1
`

func (q *Queries) DeletePitchRequest(ctx context.Context, salesRepID int64) error {
	_, err := q.exec(ctx, q.deletePitchRequestStmt, deletePitchRequest, salesRepID)
	return err
}

const getPitchRequestForUpdate = `-- name: GetPitchRequestForUpdate :one
SELECT id, sales_rep_id, sales_rep_name, status, customer_name, pitch_tag, customer_request, request_deadline, admin_viewed, created_at, updated_at FROM pitch_requests
WHERE id = $1
LIMIT 1
FOR UPDATE
`

func (q *Queries) GetPitchRequestForUpdate(ctx context.Context, id int64) (PitchRequest, error) {
	row := q.queryRow(ctx, q.getPitchRequestForUpdateStmt, getPitchRequestForUpdate, id)
	var i PitchRequest
	err := row.Scan(
		&i.ID,
		&i.SalesRepID,
		&i.SalesRepName,
		&i.Status,
		&i.CustomerName,
		&i.PitchTag,
		&i.CustomerRequest,
		&i.RequestDeadline,
		&i.AdminViewed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePitchRequest = `-- name: UpdatePitchRequest :one
UPDATE pitch_requests
    set status = $2, pitch_tag = $3, customer_request = $4, admin_viewed = $5
WHERE id = $1
RETURNING id, sales_rep_id, sales_rep_name, status, customer_name, pitch_tag, customer_request, request_deadline, admin_viewed, created_at, updated_at
`

type UpdatePitchRequestParams struct {
	ID              int64
	Status          string
	PitchTag        string
	CustomerRequest string
	AdminViewed     bool
}

func (q *Queries) UpdatePitchRequest(ctx context.Context, arg UpdatePitchRequestParams) (PitchRequest, error) {
	row := q.queryRow(ctx, q.updatePitchRequestStmt, updatePitchRequest,
		arg.ID,
		arg.Status,
		arg.PitchTag,
		arg.CustomerRequest,
		arg.AdminViewed,
	)
	var i PitchRequest
	err := row.Scan(
		&i.ID,
		&i.SalesRepID,
		&i.SalesRepName,
		&i.Status,
		&i.CustomerName,
		&i.PitchTag,
		&i.CustomerRequest,
		&i.RequestDeadline,
		&i.AdminViewed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
    set username = $2, password = $1
WHERE id = $1
RETURNING id, username, role, full_name, email, password, updated_at, created_at
`

type UpdateUserParams struct {
	Password string
	Username string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser, arg.Password, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const viewPitchRequests = `-- name: ViewPitchRequests :many
SELECT id, sales_rep_id, sales_rep_name, status, customer_name, pitch_tag, customer_request, request_deadline, admin_viewed, created_at, updated_at FROM pitch_requests
WHERE id = $1
LIMIT $2
OFFSET $3
`

type ViewPitchRequestsParams struct {
	ID     int64
	Limit  int32
	Offset int32
}

func (q *Queries) ViewPitchRequests(ctx context.Context, arg ViewPitchRequestsParams) ([]PitchRequest, error) {
	rows, err := q.query(ctx, q.viewPitchRequestsStmt, viewPitchRequests, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PitchRequest{}
	for rows.Next() {
		var i PitchRequest
		if err := rows.Scan(
			&i.ID,
			&i.SalesRepID,
			&i.SalesRepName,
			&i.Status,
			&i.CustomerName,
			&i.PitchTag,
			&i.CustomerRequest,
			&i.RequestDeadline,
			&i.AdminViewed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
