// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createMasterUser = `-- name: CreateMasterUser :one
INSERT INTO users (username, role, full_name, email, password, is_master)
VALUES ($1, $2, $3, $4, $5, true)
RETURNING users.id
`

type CreateMasterUserParams struct {
	Username string `json:"username"`
	Role     string `json:"role"`
	FullName string `json:"full_name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateMasterUser(ctx context.Context, arg CreateMasterUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createMasterUser,
		arg.Username,
		arg.Role,
		arg.FullName,
		arg.Email,
		arg.Password,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, role, full_name, email, password)
VALUES ( $1, $2, $3, $4, $5)
RETURNING users.id
`

type CreateUserParams struct {
	Username string `json:"username"`
	Role     string `json:"role"`
	FullName string `json:"full_name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Role,
		arg.FullName,
		arg.Email,
		arg.Password,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :execrows
DELETE FROM users
WHERE users.id = $1 AND (
    users.is_master != true
    )
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getMasterUser = `-- name: GetMasterUser :one
SELECT id as user_id FROM users
WHERE is_master = true
`

func (q *Queries) GetMasterUser(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getMasterUser)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const getNumberOfAdminUsers = `-- name: GetNumberOfAdminUsers :one
SELECT COUNT(*) FROM users WHERE role = $1
`

func (q *Queries) GetNumberOfAdminUsers(ctx context.Context, role string) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfAdminUsers, role)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, role, full_name, email, password, is_master, password_changed, updated_at, created_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.IsMaster,
		&i.PasswordChanged,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserFullName = `-- name: GetUserFullName :one
SELECT users.full_name FROM users
WHERE users.id = $1
`

func (q *Queries) GetUserFullName(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRow(ctx, getUserFullName, id)
	var full_name string
	err := row.Scan(&full_name)
	return full_name, err
}

const testGetUserPaginated = `-- name: TestGetUserPaginated :one
WITH user_data AS (
    SELECT 
        id as user_id,
        username,
        role,
        email,
        full_name,
        password_changed,
        to_char(updated_at AT TIME ZONE 'UTC', 'YYYY-MM-DD"T"HH24:MI:SS"Z"') AS updated_at,
        to_char(created_at AT TIME ZONE 'UTC', 'YYYY-MM-DD"T"HH24:MI:SS"Z"') AS created_at
    FROM users
    ORDER BY id
    LIMIT $1 OFFSET $2
)
SELECT 
    (SELECT COUNT(*) FROM users) AS total_users,
    json_agg(user_data) AS users
FROM user_data
`

type TestGetUserPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type TestGetUserPaginatedRow struct {
	TotalUsers int64  `json:"total_users"`
	Users      []byte `json:"users"`
}

func (q *Queries) TestGetUserPaginated(ctx context.Context, arg TestGetUserPaginatedParams) (TestGetUserPaginatedRow, error) {
	row := q.db.QueryRow(ctx, testGetUserPaginated, arg.Limit, arg.Offset)
	var i TestGetUserPaginatedRow
	err := row.Scan(&i.TotalUsers, &i.Users)
	return i, err
}

const updateUser = `-- name: UpdateUser :execrows
UPDATE users 
 SET username = $2, full_name = $3, role = $4, email = $5, updated_at = NOW()
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
	FullName string `json:"full_name"`
	Role     string `json:"role"`
	Email    string `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.FullName,
		arg.Role,
		arg.Email,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
 SET password = $2, password_changed = $3
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID              int64  `json:"id"`
	Password        string `json:"password"`
	PasswordChanged bool   `json:"password_changed"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Password, arg.PasswordChanged)
	return err
}
